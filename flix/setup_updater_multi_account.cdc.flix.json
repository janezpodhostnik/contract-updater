{
    "f_type": "InteractionTemplate",
    "f_version": "1.1.0",
    "id": "01a8cfe025fae96d5fb72e017ea5a9f723bb76f4c6754bb8937fb460fafbd542",
    "data": {
        "type": "transaction",
        "interface": "",
        "messages": null,
        "cadence": {
            "body": "import \"MetadataViews\"\n\nimport \"StagedContractUpdates\"\n\n/// Retrieves Host Capabilities from the contract-hosting accounts and assigns an update deployment in an encapsulating\n/// Updater. This demos an advanced case where an update deployment involves a network of dependent contracts across\n/// multiple hosting accounts.\n///\n/// NOTES: deploymentConfig is ordered, and the order is used to determine the order of the contracts in the deployment.\n/// Each entry in the array must be exactly one key-value pair, where the key is the address of the associated contract\n/// name and code.\n/// This transaction also assumes that all contract hosting AuthAccount Capabilities have been published for the signer\n/// to claim.\n///\ntransaction(blockHeightBoundary: UInt64?, contractAddresses: [Address], deploymentConfig: [[{Address: {String: String}}]]) {\n\n    prepare(signer: AuthAccount) {\n        // Abort if Updater is already configured in signer's account\n        if signer.type(at: StagedContractUpdates.UpdaterStoragePath) != nil {\n            panic(\"Updater already configured at expected path!\")\n        }\n\n        // Claim all Host Capabilities from contract addresses\n        let hostCaps: [Capability\u003c\u0026StagedContractUpdates.Host\u003e] = []\n        let seenAddresses: [Address] = []\n        for address in contractAddresses {\n            if seenAddresses.contains(address) {\n                continue\n            }\n            let hostCap: Capability\u003c\u0026StagedContractUpdates.Host\u003e = signer.inbox.claim\u003c\u0026StagedContractUpdates.Host\u003e(\n                StagedContractUpdates.inboxHostCapabilityNamePrefix.concat(signer.address.toString()),\n                provider: address\n            ) ?? panic(\"No Host Capability found in Inbox for signer at address: \".concat(address.toString()))\n            hostCaps.append(hostCap)\n            seenAddresses.append(address)\n        }\n        // Construct deployment from config\n        let deployments: [[StagedContractUpdates.ContractUpdate]] = StagedContractUpdates.getDeploymentFromConfig(deploymentConfig)\n\n        // Construct the updater, save and link public Capability\n        let contractUpdater: @StagedContractUpdates.Updater \u003c- StagedContractUpdates.createNewUpdater(\n                blockUpdateBoundary: blockHeightBoundary ?? StagedContractUpdates.blockUpdateBoundary,\n                hosts: hostCaps,\n                deployments: deployments\n            )\n        signer.save(\n            \u003c-contractUpdater,\n            to: StagedContractUpdates.UpdaterStoragePath\n        )\n        signer.unlink(StagedContractUpdates.UpdaterPublicPath)\n        signer.link\u003c\u0026{StagedContractUpdates.UpdaterPublic, MetadataViews.Resolver}\u003e(\n            StagedContractUpdates.UpdaterPublicPath,\n            target: StagedContractUpdates.UpdaterStoragePath\n        )\n    }\n}\n",
            "network_pins": []
        },
        "dependencies": [
            {
                "contracts": [
                    {
                        "contract": "MetadataViews",
                        "networks": [
                            {
                                "network": "mainnet",
                                "address": "0x1d7e57aa55817448",
                                "dependency_pin_block_height": 72002367,
                                "dependency_pin": {
                                    "pin": "48cdb16fa01e24bc986b68c33e8f196dfbdb48dc93ff11cf7689c4a90dbe345e",
                                    "pin_self": "16312239523708c4413ecd508ae41c5c7075949b1c07ac42c3ac0027f72bdbf5",
                                    "pin_contract_name": "MetadataViews",
                                    "pin_contract_address": "0x1d7e57aa55817448",
                                    "imports": [
                                        {
                                            "pin": "ac0208f93d07829ec96584d618ddbec6af3cf4e2866bd5071249e8ec93c7e0dc",
                                            "pin_self": "cdadd5b5897f2dfe35d8b25f4e41fea9f8fca8f40f8a8b506b33701ef5033076",
                                            "pin_contract_name": "FungibleToken",
                                            "pin_contract_address": "0xf233dcee88fe0abe",
                                            "imports": []
                                        },
                                        {
                                            "pin": "b2ab6c499be905685f1b34cfd0e6fb5740be90421589a9a230bc6b193d813b74",
                                            "pin_self": "dde9cd040a14d91d43fd551f92199bfa8742811c293446ea950fa4f5f0543404",
                                            "pin_contract_name": "NonFungibleToken",
                                            "pin_contract_address": "0x1d7e57aa55817448",
                                            "imports": []
                                        }
                                    ]
                                }
                            },
                            {
                                "network": "testnet",
                                "address": "0x631e88ae7f1d7c20",
                                "dependency_pin_block_height": 156134236,
                                "dependency_pin": {
                                    "pin": "22f424750f179e097ef1e36dc0c032e6b923f1c68d654e39a7788f3f322bd58c",
                                    "pin_self": "2ea8816094f91e7df89f254a3523bca39604f933d185ba8535070158afe5af3c",
                                    "pin_contract_name": "MetadataViews",
                                    "pin_contract_address": "0x631e88ae7f1d7c20",
                                    "imports": [
                                        {
                                            "pin": "ac0208f93d07829ec96584d618ddbec6af3cf4e2866bd5071249e8ec93c7e0dc",
                                            "pin_self": "cdadd5b5897f2dfe35d8b25f4e41fea9f8fca8f40f8a8b506b33701ef5033076",
                                            "pin_contract_name": "FungibleToken",
                                            "pin_contract_address": "0x9a0766d93b6608b7",
                                            "imports": []
                                        },
                                        {
                                            "pin": "b2ab6c499be905685f1b34cfd0e6fb5740be90421589a9a230bc6b193d813b74",
                                            "pin_self": "dde9cd040a14d91d43fd551f92199bfa8742811c293446ea950fa4f5f0543404",
                                            "pin_contract_name": "NonFungibleToken",
                                            "pin_contract_address": "0x631e88ae7f1d7c20",
                                            "imports": []
                                        }
                                    ]
                                }
                            },
                            {
                                "network": "emulator",
                                "address": "0xf8d6e0586b0a20c7",
                                "dependency_pin_block_height": 0
                            }
                        ]
                    }
                ]
            },
            {
                "contracts": [
                    {
                        "contract": "StagedContractUpdates",
                        "networks": [
                            {
                                "network": "testing",
                                "address": "0x3030303030303037",
                                "dependency_pin_block_height": 0
                            },
                            {
                                "network": "emulator",
                                "address": "0x3662306132306337",
                                "dependency_pin_block_height": 0
                            }
                        ]
                    }
                ]
            }
        ],
        "parameters": [
            {
                "label": "blockHeightBoundary",
                "index": 0,
                "type": "UInt64?",
                "messages": []
            },
            {
                "label": "contractAddresses",
                "index": 1,
                "type": "[Address]",
                "messages": []
            },
            {
                "label": "deploymentConfig",
                "index": 2,
                "type": "[[{Address: {String: String}}]]",
                "messages": []
            }
        ]
    }
}