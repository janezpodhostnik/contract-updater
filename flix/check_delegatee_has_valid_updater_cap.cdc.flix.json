{
    "f_type": "InteractionTemplate",
    "f_version": "1.1.0",
    "id": "4d47a41a4cf741b57861b4d0c95bc91ba73b723cfffa3d7b9d7e2dde14a4ebf3",
    "data": {
        "type": "script",
        "interface": "",
        "messages": null,
        "cadence": {
            "body": "import \"StagedContractUpdates\"\n\npub fun main(updaterAddress: Address, delegateeAddress: Address): Bool? {\n    let updater = getAuthAccount(updaterAddress).borrow\u003c\u0026StagedContractUpdates.Updater\u003e(\n            from: StagedContractUpdates.UpdaterStoragePath\n        ) ?? panic(\"Could not borrow contract updater reference\")\n    let id = updater.getID()\n\n    let delegatee = getAuthAccount(delegateeAddress).borrow\u003c\u0026StagedContractUpdates.Delegatee\u003e(\n            from: StagedContractUpdates.DelegateeStoragePath\n        ) ?? panic(\"Could not borrow contract delegatee reference\")\n    return delegatee.check(id: id)\n}",
            "network_pins": []
        },
        "dependencies": [
            {
                "contracts": [
                    {
                        "contract": "StagedContractUpdates",
                        "networks": [
                            {
                                "network": "emulator",
                                "address": "0x3662306132306337",
                                "dependency_pin_block_height": 0
                            },
                            {
                                "network": "testing",
                                "address": "0x3030303030303037",
                                "dependency_pin_block_height": 0
                            }
                        ]
                    }
                ]
            }
        ],
        "parameters": [
            {
                "label": "updaterAddress",
                "index": 0,
                "type": "Address",
                "messages": []
            },
            {
                "label": "delegateeAddress",
                "index": 1,
                "type": "Address",
                "messages": []
            }
        ],
        "output": {
            "label": "result",
            "index": 0,
            "type": "Bool?",
            "messages": []
        }
    }
}